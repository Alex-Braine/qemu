34a35,36
> #include "afunix.h"
> #include <Windows.h>
88c90
<     case PF_UNIX:  return NETWORK_ADDRESS_FAMILY_UNIX;
---
>     case AF_UNIX:  return NETWORK_ADDRESS_FAMILY_UNIX;
377a380
>         printf("conecting\n");
384c387,389
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         qemu_log("[inet_connect_addr] Failed to connect");
>         Sleep(600000);
>         error_setg_errno(errp, errno, "x[inet_connect_addr] Failed to connect to '%s:%s'",
579c584
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         error_setg_errno(errp, errno, "[inet_dgram_saddr] Failed to connect to '%s:%s'",
785c790
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         error_setg_errno(errp, errno, "[vsock_connect_addr] Failed to connect to '%s:%s'",
884,885d888
< #ifndef _WIN32
< 
916c919
<     sock = qemu_socket(PF_UNIX, SOCK_STREAM, 0);
---
>     sock = qemu_socket(AF_UNIX, SOCK_STREAM, 0);
1008c1011
<     sock = qemu_socket(PF_UNIX, SOCK_STREAM, 0);
---
>     sock = socket(AF_UNIX, SOCK_STREAM, 0);
1024d1026
<     memset(&un, 0, sizeof(un));
1027,1036c1029
< 
<     if (abstract) {
<         un.sun_path[0] = '\0';
<         memcpy(&un.sun_path[1], saddr->path, pathlen);
<         if (saddr_is_tight(saddr)) {
<             addrlen = offsetof(struct sockaddr_un, sun_path) + 1 + pathlen;
<         }
<     } else {
<         memcpy(un.sun_path, saddr->path, pathlen);
<     }
---
>     strncpy(un.sun_path, saddr->path, pathlen);
1039a1033,1034
>         qemu_log("[unix_connect_saddr] conecting");
>         printf("[unix_connect_saddr] conecting\n");
1046c1041,1043
<         error_setg_errno(errp, -rc, "Failed to connect to '%s'",
---
>         qemu_log("[unix_connect_saddr] Failed to connect");
>         Sleep(600000);
>         error_setg_errno(errp, -rc, "x[unix_connect_saddr] Failed to connect to '%s'",
1058,1076d1054
< #else
< 
< static int unix_listen_saddr(UnixSocketAddress *saddr,
<                              int num,
<                              Error **errp)
< {
<     error_setg(errp, "unix sockets are not available on windows");
<     errno = ENOTSUP;
<     return -1;
< }
< 
< static int unix_connect_saddr(UnixSocketAddress *saddr, Error **errp)
< {
<     error_setg(errp, "unix sockets are not available on windows");
<     errno = ENOTSUP;
<     return -1;
< }
< #endif
< 
1096a1075
>     printf("[unix_connect]\n");
1195a1175
>         printf("[socket_connect]\n");
1339d1318
< #ifndef WIN32
1366d1344
< #endif /* WIN32 */
1398d1375
< #ifndef WIN32
1401d1377
< #endif /* WIN32 */
