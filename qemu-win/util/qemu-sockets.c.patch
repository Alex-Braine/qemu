34a35
> #include "afunix.h"
88c89
<     case PF_UNIX:  return NETWORK_ADDRESS_FAMILY_UNIX;
---
>     case AF_UNIX:  return NETWORK_ADDRESS_FAMILY_UNIX;
384c385
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         error_setg_errno(errp, errno, "[inet_connect_addr] Failed to connect to '%s:%s'",
579c580
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         error_setg_errno(errp, errno, "[inet_dgram_saddr] Failed to connect to '%s:%s'",
785c786
<         error_setg_errno(errp, errno, "Failed to connect to '%s:%s'",
---
>         error_setg_errno(errp, errno, "[vsock_connect_addr] Failed to connect to '%s:%s'",
884,885d884
< #ifndef _WIN32
< 
916c915
<     sock = qemu_socket(PF_UNIX, SOCK_STREAM, 0);
---
>     sock = qemu_socket(AF_UNIX, SOCK_STREAM, 0);
1008c1007
<     sock = qemu_socket(PF_UNIX, SOCK_STREAM, 0);
---
>     sock = qemu_socket(AF_UNIX, SOCK_STREAM, 0);
1046c1045
<         error_setg_errno(errp, -rc, "Failed to connect to '%s'",
---
>         error_setg_errno(errp, -rc, "[unix_connect_saddr] Failed to connect to '%s'",
1058,1076d1056
< #else
< 
< static int unix_listen_saddr(UnixSocketAddress *saddr,
<                              int num,
<                              Error **errp)
< {
<     error_setg(errp, "unix sockets are not available on windows");
<     errno = ENOTSUP;
<     return -1;
< }
< 
< static int unix_connect_saddr(UnixSocketAddress *saddr, Error **errp)
< {
<     error_setg(errp, "unix sockets are not available on windows");
<     errno = ENOTSUP;
<     return -1;
< }
< #endif
< 
1339d1318
< #ifndef WIN32
1366d1344
< #endif /* WIN32 */
1398d1375
< #ifndef WIN32
1401d1377
< #endif /* WIN32 */
